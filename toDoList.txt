* Books Requested By Me
* Books Requested To Me
   ** Approve (send email - delete tuple) / Reject (remove requested_by_langara_id from owned_copy)
* Profile
* Email System

Caue
* Interface
	* Search bar (Drop menu for author or title)


Need to implement:
	
Queries:
//Dashboard query updated:
Not displaying books owned by user who's viwing available books.
SELECT * FROM ALL_AVAILABLE_BOOKS
WHERE bOwner NOT IN (SELECT langara_id FROM sys_user WHERE sys_user.email='${email}')
LIMIT ${num};

Search Queries:
//Search by title
SELECT * FROM ALL_AVAILABLE_BOOKS
WHERE title LIKE '%${search}%'
LIMIT ${num};

//Search by author
SELECT * FROM ALL_AVAILABLE_BOOKS
WHERE author LIKE '%${search}%'
LIMIT ${num};

//1. [1 Mark] Projection query: -- stupid AF
Page: myProfile.ejs or create a new view like statistics.ejs
SELECT title FROM book

//4. [1 Mark] Division query: --- I have no idea how to implement this shit. haha

//5. [2 Mark] Aggregation query:
This is linked with Query 1.
SELECT COUNT(isbn13) FROM book;
SELECT ROUND(AVG(book_price), 2) AS AvgAllBooks FROM owned_copy;

//6. [1 Mark] Nested aggregation with group-by:
Page: mybooks.ejs
SELECT owner_langara_id, COUNT(copy_id) AS totalBooks, AVG(book_price) AS avgPrice
FROM owned_copy
WHERE owner_langara_id = (SELECT langara_id FROM sys_user WHERE sys_user.email='${email}')
GROUP BY owner_langara_id;

//7. [2 Marks] Delete operation: Implement a cascade-on-delete situation.
Page: myProfile.ejs
DELETE FROM sys_user WHERE langara_id = '${langara_id}'